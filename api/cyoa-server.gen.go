// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new player state.
	// (POST /player)
	PostPlayer(ctx echo.Context) error
	// Retrieve a player's state by ID.
	// (GET /player/{playerId})
	GetPlayerPlayerId(ctx echo.Context, playerId string) error
	// Update a player's state by ID.
	// (PATCH /player/{playerId})
	PatchPlayerPlayerId(ctx echo.Context, playerId string) error
	// Retrieve a story node by its ID.
	// (GET /storyElements/{nodeId})
	GetStoryElementsNodeId(ctx echo.Context, nodeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostPlayer converts echo context to params.
func (w *ServerInterfaceWrapper) PostPlayer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPlayer(ctx)
	return err
}

// GetPlayerPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayerPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playerId", runtime.ParamLocationPath, ctx.Param("playerId"), &playerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayerPlayerId(ctx, playerId)
	return err
}

// PatchPlayerPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchPlayerPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playerId", runtime.ParamLocationPath, ctx.Param("playerId"), &playerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchPlayerPlayerId(ctx, playerId)
	return err
}

// GetStoryElementsNodeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStoryElementsNodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, ctx.Param("nodeId"), &nodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStoryElementsNodeId(ctx, nodeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/player", wrapper.PostPlayer)
	router.GET(baseURL+"/player/:playerId", wrapper.GetPlayerPlayerId)
	router.PATCH(baseURL+"/player/:playerId", wrapper.PatchPlayerPlayerId)
	router.GET(baseURL+"/storyElements/:nodeId", wrapper.GetStoryElementsNodeId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yWUWvbMBDHv4q4DfZi7HR781vWjhEYW2jpwxhlKPalUbEl7e6cYEK++5DskLR2Sgtb",
	"tqe6p7+k0++vO2ULhau9s2iFId8CFyusdfycV7pFCl+enEcSgzH+05TD4FvXRaX1CDmwkLH3sNsl+4hb",
	"PGAhsEsAa22qEW0CLI7aG9GCww00iVnqosvSCNY8ukQf0ES6Df8XDRFauVxpL91hBlN6yVyTjI5vDJeu",
	"ftW+Y8duGMnqGl9I6Saw+FRhjVb+vAfP0jzIBjQPGAfu3F5/GSVz4swJrE2JbnzWWMqFs9KzGO7hSpxd",
	"jQ45L8bZV57T93fh7Id85q6dyna4TAgZu3RhcolckIkMIIepVdP5TC0dKa0uV84xqu+uIfVtY9W0XKOV",
	"hlDd6xpTSECMVGHh08rpfAYJrJG42+AinaSTDjta7Q3k8CGGAlNZxfNk/tBYHEfOgbIOOc5KyGHuWPrm",
	"kwDhrwZZPrqyDcqjW6C9r0wRp2UPHLbft69YDIRLyOFNduhvWd/csn7xCCqsbwhLyIUajAH2znJn+fvJ",
	"xV/Z9bEt3Yji0PlUQagFS8VNUSDzsqmqNo02c1PXmtpgSNQorSxulD+a3Ql7wtm2+zsrdyG3exxh/Rl7",
	"1PNeGp0iXaMgMeQ/tmBCisE92N9z8AfxY37JEYun1/1uwHZybraEQgbXWD4Fet0PKN3jfMf9lEWrZldp",
	"1xSkWI3c1hA+K8N/WxBnN63xZSiIp5bdxvBpw0Id8NEjytk2PhPPF8Pxs8tfo/5Fbtq99P+oh0e/HkYA",
	"x3EVkn5RTfBBvmiVEe4RBz3Ses+loQpyWIl4zrNMe5O2rqENLtgIpoWrYXe3+x0AAP//G4SIXXIKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
