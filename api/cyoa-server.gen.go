// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new player.
	// (POST /players)
	PostPlayers(ctx echo.Context) error
	// Retrieve a player's state by their ID.
	// (GET /players/{playerId})
	GetPlayersPlayerId(ctx echo.Context, playerId string) error
	// Update a player's state by their ID.
	// (PATCH /players/{playerId})
	PatchPlayersPlayerId(ctx echo.Context, playerId string) error
	// Create a new story element.
	// (POST /storyElements)
	PostStoryElements(ctx echo.Context) error
	// Delete a story element by its node ID.
	// (DELETE /storyElements/{nodeId})
	DeleteStoryElementsNodeId(ctx echo.Context, nodeId string) error
	// Retrieve a story element by its node ID.
	// (GET /storyElements/{nodeId})
	GetStoryElementsNodeId(ctx echo.Context, nodeId string) error
	// Update a part of a story element by its node ID.
	// (PATCH /storyElements/{nodeId})
	PatchStoryElementsNodeId(ctx echo.Context, nodeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostPlayers converts echo context to params.
func (w *ServerInterfaceWrapper) PostPlayers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPlayers(ctx)
	return err
}

// GetPlayersPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayersPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playerId", runtime.ParamLocationPath, ctx.Param("playerId"), &playerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayersPlayerId(ctx, playerId)
	return err
}

// PatchPlayersPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchPlayersPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playerId", runtime.ParamLocationPath, ctx.Param("playerId"), &playerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchPlayersPlayerId(ctx, playerId)
	return err
}

// PostStoryElements converts echo context to params.
func (w *ServerInterfaceWrapper) PostStoryElements(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStoryElements(ctx)
	return err
}

// DeleteStoryElementsNodeId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStoryElementsNodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, ctx.Param("nodeId"), &nodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteStoryElementsNodeId(ctx, nodeId)
	return err
}

// GetStoryElementsNodeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStoryElementsNodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, ctx.Param("nodeId"), &nodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStoryElementsNodeId(ctx, nodeId)
	return err
}

// PatchStoryElementsNodeId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchStoryElementsNodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, ctx.Param("nodeId"), &nodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchStoryElementsNodeId(ctx, nodeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/players", wrapper.PostPlayers)
	router.GET(baseURL+"/players/:playerId", wrapper.GetPlayersPlayerId)
	router.PATCH(baseURL+"/players/:playerId", wrapper.PatchPlayersPlayerId)
	router.POST(baseURL+"/storyElements", wrapper.PostStoryElements)
	router.DELETE(baseURL+"/storyElements/:nodeId", wrapper.DeleteStoryElementsNodeId)
	router.GET(baseURL+"/storyElements/:nodeId", wrapper.GetStoryElementsNodeId)
	router.PATCH(baseURL+"/storyElements/:nodeId", wrapper.PatchStoryElementsNodeId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX328iNxD+Vyy30r0gfrRRW/GWhqpCut6hpOhUnaLKrAfWp13bsWdJEOJ/r2zvApv1",
	"sqBTQt+Md+bz+PtmxsOWJirXSoJES8dbapMUcuaXd6kSCbiVNkqDQQF+n4NNjNAolGz8pJPDL6KWBFMg",
	"icfp0x7FjQY6phaNkCu661GRsxXMTdbE+ewXLCPz+48EFWGSeGOyVKYLVcILflIcppMmrtsngoNEsRRg",
	"9nC2WFh4KkAisajMhkAGOUiMHvAsLFd5DH4fdjA5PsnAUyEM8O4b7Hq0Mqbjr7UTapd73HuqxTdI0IU2",
	"y9gGTFO0fwVvRvt3CkR7hw+WFFI8FcfcRK8OORMRuWYViv9OGOcGrHUIS2VyhnRcekYgPd8PyDBEKhBy",
	"v/jRwJKO6Q+DQ4YOyvQcPOx9HEIJyYxhm6DPS0ycebjhF/ESy4BARC3kohC8U55wWMVMTBMf7B8hn85U",
	"Zv5ajEOidmYnMzi//xjBDJUUUo9pBEOYiUOU3z+xHCIlxHI41HYAwlTYKigiLNHMIFHLFnCX9+drXfah",
	"iM6JklhyWg/xLnyoouzmTF7ULoQ9A9JbxDCnbaLWSFxApuTKElRR9LXgoM6V2Ruf6GReAsa5CM1rVsvP",
	"U9J88e5H0lRJ/6pGKi72RB+0ay2YUN2NckkKY0CiN2lr8kcMV3kavIhW1l+SCHkg/jL5Okqzi+Y62F9M",
	"ayFXLszyxZhObCmfMOTI2DfTs+qlIUpZL62aRCiNqVLifvc8EC4aL8POhnPCuf1VbpesFa7R5EvsMsYm",
	"P85DyKVqnn4rye1s6o9k5C5VygL5RxWGfH6W5JavQWJhgKxYHoYBgZkDbre8nU1pj67B2HDAqD/sDx0D",
	"SoNkWtAx/dlv9ahmmHqRBuF582utrO+ZTkTmgpxy94Qri7PSKFweLP6u+MZX3aHTMq0zkXi/wTcbNA+p",
	"15WY5Wyyq5OLpgC/YbWSNqTUT8PRm5waG1pIYoAhcGKLJAFrl0WWbfo+A2yR58xsnBjehjAi4Xk/KTiT",
	"itfBNiymfOcCWkGE4T+hInhW2nqFDMsBvTRft1S4wJxqVaaNqT4Y11nrHTHwOn0fG4wO343RD+55dHQZ",
	"QCNg3cHtfWlF2GEYDf6LTdkHp5O+y2/NMEkjmeu235fZ6xbHFaQsNO8skrm36ZLRFY09mog7WtJDzfRt",
	"uK8N6O/cnppn13V4OB40L+9Vr+bUJvuDrR/JQtvikEEYuupCTPx+TQo/KJxXZrIy/Z72ddN8WOvUhNhP",
	"UxPuQVidFpegAi1xcVatpq2BX5WD4ZWy7uI+3knvqU7+3hT/H/rJtZS9rK2HP/Xd+np/MOtKrMJkdExT",
	"RG3Hg8E2VRadZjs3xTIj2CILPFQfQqkvWZGhm2Vv+qNfh/3R8Lf+6OYXh/64+y8AAP//ibrreLcUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
