// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	"github.com/okcthulhu/ChooseYourOwnAdventure/api/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPlayerWithBody request with any body
	PostPlayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlayer(ctx context.Context, body models.PostPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayerPlayerId request
	GetPlayerPlayerId(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPlayerPlayerIdWithBody request with any body
	PatchPlayerPlayerIdWithBody(ctx context.Context, playerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPlayerPlayerId(ctx context.Context, playerId openapi_types.UUID, body models.PatchPlayerPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStoryElementsWithBody request with any body
	PostStoryElementsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStoryElements(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoryElementsNodeId request
	GetStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStoryElementsNodeIdWithBody request with any body
	PutStoryElementsNodeIdWithBody(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStoryElementsNodeId(ctx context.Context, nodeId string, body models.PutStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPlayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlayer(ctx context.Context, body models.PostPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayerPlayerId(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayerPlayerIdRequest(c.Server, playerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlayerPlayerIdWithBody(ctx context.Context, playerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlayerPlayerIdRequestWithBody(c.Server, playerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlayerPlayerId(ctx context.Context, playerId openapi_types.UUID, body models.PatchPlayerPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlayerPlayerIdRequest(c.Server, playerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoryElementsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoryElementsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoryElements(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoryElementsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoryElementsNodeIdRequest(c.Server, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStoryElementsNodeIdWithBody(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStoryElementsNodeIdRequestWithBody(c.Server, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStoryElementsNodeId(ctx context.Context, nodeId string, body models.PutStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStoryElementsNodeIdRequest(c.Server, nodeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPlayerRequest calls the generic PostPlayer builder with application/json body
func NewPostPlayerRequest(server string, body models.PostPlayerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlayerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPlayerRequestWithBody generates requests for PostPlayer with any type of body
func NewPostPlayerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlayerPlayerIdRequest generates requests for GetPlayerPlayerId
func NewGetPlayerPlayerIdRequest(server string, playerId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerId", runtime.ParamLocationPath, playerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPlayerPlayerIdRequest calls the generic PatchPlayerPlayerId builder with application/json body
func NewPatchPlayerPlayerIdRequest(server string, playerId openapi_types.UUID, body models.PatchPlayerPlayerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPlayerPlayerIdRequestWithBody(server, playerId, "application/json", bodyReader)
}

// NewPatchPlayerPlayerIdRequestWithBody generates requests for PatchPlayerPlayerId with any type of body
func NewPatchPlayerPlayerIdRequestWithBody(server string, playerId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerId", runtime.ParamLocationPath, playerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStoryElementsRequest calls the generic PostStoryElements builder with application/json body
func NewPostStoryElementsRequest(server string, body models.PostStoryElementsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStoryElementsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStoryElementsRequestWithBody generates requests for PostStoryElements with any type of body
func NewPostStoryElementsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStoryElementsNodeIdRequest generates requests for GetStoryElementsNodeId
func NewGetStoryElementsNodeIdRequest(server string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutStoryElementsNodeIdRequest calls the generic PutStoryElementsNodeId builder with application/json body
func NewPutStoryElementsNodeIdRequest(server string, nodeId string, body models.PutStoryElementsNodeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStoryElementsNodeIdRequestWithBody(server, nodeId, "application/json", bodyReader)
}

// NewPutStoryElementsNodeIdRequestWithBody generates requests for PutStoryElementsNodeId with any type of body
func NewPutStoryElementsNodeIdRequestWithBody(server string, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPlayerWithBodyWithResponse request with any body
	PostPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlayerResponse, error)

	PostPlayerWithResponse(ctx context.Context, body models.PostPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayerResponse, error)

	// GetPlayerPlayerIdWithResponse request
	GetPlayerPlayerIdWithResponse(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPlayerPlayerIdResponse, error)

	// PatchPlayerPlayerIdWithBodyWithResponse request with any body
	PatchPlayerPlayerIdWithBodyWithResponse(ctx context.Context, playerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlayerPlayerIdResponse, error)

	PatchPlayerPlayerIdWithResponse(ctx context.Context, playerId openapi_types.UUID, body models.PatchPlayerPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlayerPlayerIdResponse, error)

	// PostStoryElementsWithBodyWithResponse request with any body
	PostStoryElementsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error)

	PostStoryElementsWithResponse(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error)

	// GetStoryElementsNodeIdWithResponse request
	GetStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*GetStoryElementsNodeIdResponse, error)

	// PutStoryElementsNodeIdWithBodyWithResponse request with any body
	PutStoryElementsNodeIdWithBodyWithResponse(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStoryElementsNodeIdResponse, error)

	PutStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, body models.PutStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStoryElementsNodeIdResponse, error)
}

type PostPlayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *models.Player
}

// Status returns HTTPResponse.Status
func (r PostPlayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayerPlayerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.Player
}

// Status returns HTTPResponse.Status
func (r GetPlayerPlayerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayerPlayerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPlayerPlayerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.Player
}

// Status returns HTTPResponse.Status
func (r PatchPlayerPlayerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPlayerPlayerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStoryElementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *models.StoryElement
}

// Status returns HTTPResponse.Status
func (r PostStoryElementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStoryElementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoryElementsNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.StoryElement
}

// Status returns HTTPResponse.Status
func (r GetStoryElementsNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoryElementsNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStoryElementsNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.StoryElement
}

// Status returns HTTPResponse.Status
func (r PutStoryElementsNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStoryElementsNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPlayerWithBodyWithResponse request with arbitrary body returning *PostPlayerResponse
func (c *ClientWithResponses) PostPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlayerResponse, error) {
	rsp, err := c.PostPlayerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayerResponse(rsp)
}

func (c *ClientWithResponses) PostPlayerWithResponse(ctx context.Context, body models.PostPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayerResponse, error) {
	rsp, err := c.PostPlayer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayerResponse(rsp)
}

// GetPlayerPlayerIdWithResponse request returning *GetPlayerPlayerIdResponse
func (c *ClientWithResponses) GetPlayerPlayerIdWithResponse(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPlayerPlayerIdResponse, error) {
	rsp, err := c.GetPlayerPlayerId(ctx, playerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayerPlayerIdResponse(rsp)
}

// PatchPlayerPlayerIdWithBodyWithResponse request with arbitrary body returning *PatchPlayerPlayerIdResponse
func (c *ClientWithResponses) PatchPlayerPlayerIdWithBodyWithResponse(ctx context.Context, playerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlayerPlayerIdResponse, error) {
	rsp, err := c.PatchPlayerPlayerIdWithBody(ctx, playerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlayerPlayerIdResponse(rsp)
}

func (c *ClientWithResponses) PatchPlayerPlayerIdWithResponse(ctx context.Context, playerId openapi_types.UUID, body models.PatchPlayerPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlayerPlayerIdResponse, error) {
	rsp, err := c.PatchPlayerPlayerId(ctx, playerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlayerPlayerIdResponse(rsp)
}

// PostStoryElementsWithBodyWithResponse request with arbitrary body returning *PostStoryElementsResponse
func (c *ClientWithResponses) PostStoryElementsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error) {
	rsp, err := c.PostStoryElementsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoryElementsResponse(rsp)
}

func (c *ClientWithResponses) PostStoryElementsWithResponse(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error) {
	rsp, err := c.PostStoryElements(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoryElementsResponse(rsp)
}

// GetStoryElementsNodeIdWithResponse request returning *GetStoryElementsNodeIdResponse
func (c *ClientWithResponses) GetStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*GetStoryElementsNodeIdResponse, error) {
	rsp, err := c.GetStoryElementsNodeId(ctx, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoryElementsNodeIdResponse(rsp)
}

// PutStoryElementsNodeIdWithBodyWithResponse request with arbitrary body returning *PutStoryElementsNodeIdResponse
func (c *ClientWithResponses) PutStoryElementsNodeIdWithBodyWithResponse(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStoryElementsNodeIdResponse, error) {
	rsp, err := c.PutStoryElementsNodeIdWithBody(ctx, nodeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStoryElementsNodeIdResponse(rsp)
}

func (c *ClientWithResponses) PutStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, body models.PutStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStoryElementsNodeIdResponse, error) {
	rsp, err := c.PutStoryElementsNodeId(ctx, nodeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStoryElementsNodeIdResponse(rsp)
}

// ParsePostPlayerResponse parses an HTTP response from a PostPlayerWithResponse call
func ParsePostPlayerResponse(rsp *http.Response) (*PostPlayerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest models.Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPlayerPlayerIdResponse parses an HTTP response from a GetPlayerPlayerIdWithResponse call
func ParseGetPlayerPlayerIdResponse(rsp *http.Response) (*GetPlayerPlayerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayerPlayerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchPlayerPlayerIdResponse parses an HTTP response from a PatchPlayerPlayerIdWithResponse call
func ParsePatchPlayerPlayerIdResponse(rsp *http.Response) (*PatchPlayerPlayerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPlayerPlayerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStoryElementsResponse parses an HTTP response from a PostStoryElementsWithResponse call
func ParsePostStoryElementsResponse(rsp *http.Response) (*PostStoryElementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStoryElementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest models.StoryElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetStoryElementsNodeIdResponse parses an HTTP response from a GetStoryElementsNodeIdWithResponse call
func ParseGetStoryElementsNodeIdResponse(rsp *http.Response) (*GetStoryElementsNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoryElementsNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.StoryElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutStoryElementsNodeIdResponse parses an HTTP response from a PutStoryElementsNodeIdWithResponse call
func ParsePutStoryElementsNodeIdResponse(rsp *http.Response) (*PutStoryElementsNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStoryElementsNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.StoryElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
