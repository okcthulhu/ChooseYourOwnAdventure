// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	"github.com/okcthulhu/ChooseYourOwnAdventure/api/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPlayersWithBody request with any body
	PostPlayersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlayers(ctx context.Context, body models.PostPlayersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersPlayerId request
	GetPlayersPlayerId(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPlayersPlayerIdWithBody request with any body
	PatchPlayersPlayerIdWithBody(ctx context.Context, playerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPlayersPlayerId(ctx context.Context, playerId string, body models.PatchPlayersPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStoryElementsWithBody request with any body
	PostStoryElementsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStoryElements(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStoryElementsNodeId request
	DeleteStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoryElementsNodeId request
	GetStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchStoryElementsNodeIdWithBody request with any body
	PatchStoryElementsNodeIdWithBody(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchStoryElementsNodeId(ctx context.Context, nodeId string, body models.PatchStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPlayersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlayers(ctx context.Context, body models.PostPlayersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersPlayerId(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersPlayerIdRequest(c.Server, playerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlayersPlayerIdWithBody(ctx context.Context, playerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlayersPlayerIdRequestWithBody(c.Server, playerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlayersPlayerId(ctx context.Context, playerId string, body models.PatchPlayersPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlayersPlayerIdRequest(c.Server, playerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoryElementsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoryElementsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoryElements(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoryElementsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStoryElementsNodeIdRequest(c.Server, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoryElementsNodeIdRequest(c.Server, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStoryElementsNodeIdWithBody(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStoryElementsNodeIdRequestWithBody(c.Server, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStoryElementsNodeId(ctx context.Context, nodeId string, body models.PatchStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStoryElementsNodeIdRequest(c.Server, nodeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPlayersRequest calls the generic PostPlayers builder with application/json body
func NewPostPlayersRequest(server string, body models.PostPlayersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlayersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPlayersRequestWithBody generates requests for PostPlayers with any type of body
func NewPostPlayersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlayersPlayerIdRequest generates requests for GetPlayersPlayerId
func NewGetPlayersPlayerIdRequest(server string, playerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerId", runtime.ParamLocationPath, playerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPlayersPlayerIdRequest calls the generic PatchPlayersPlayerId builder with application/json body
func NewPatchPlayersPlayerIdRequest(server string, playerId string, body models.PatchPlayersPlayerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPlayersPlayerIdRequestWithBody(server, playerId, "application/json", bodyReader)
}

// NewPatchPlayersPlayerIdRequestWithBody generates requests for PatchPlayersPlayerId with any type of body
func NewPatchPlayersPlayerIdRequestWithBody(server string, playerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerId", runtime.ParamLocationPath, playerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStoryElementsRequest calls the generic PostStoryElements builder with application/json body
func NewPostStoryElementsRequest(server string, body models.PostStoryElementsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStoryElementsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStoryElementsRequestWithBody generates requests for PostStoryElements with any type of body
func NewPostStoryElementsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStoryElementsNodeIdRequest generates requests for DeleteStoryElementsNodeId
func NewDeleteStoryElementsNodeIdRequest(server string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoryElementsNodeIdRequest generates requests for GetStoryElementsNodeId
func NewGetStoryElementsNodeIdRequest(server string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchStoryElementsNodeIdRequest calls the generic PatchStoryElementsNodeId builder with application/json body
func NewPatchStoryElementsNodeIdRequest(server string, nodeId string, body models.PatchStoryElementsNodeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchStoryElementsNodeIdRequestWithBody(server, nodeId, "application/json", bodyReader)
}

// NewPatchStoryElementsNodeIdRequestWithBody generates requests for PatchStoryElementsNodeId with any type of body
func NewPatchStoryElementsNodeIdRequestWithBody(server string, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPlayersWithBodyWithResponse request with any body
	PostPlayersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlayersResponse, error)

	PostPlayersWithResponse(ctx context.Context, body models.PostPlayersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayersResponse, error)

	// GetPlayersPlayerIdWithResponse request
	GetPlayersPlayerIdWithResponse(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*GetPlayersPlayerIdResponse, error)

	// PatchPlayersPlayerIdWithBodyWithResponse request with any body
	PatchPlayersPlayerIdWithBodyWithResponse(ctx context.Context, playerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlayersPlayerIdResponse, error)

	PatchPlayersPlayerIdWithResponse(ctx context.Context, playerId string, body models.PatchPlayersPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlayersPlayerIdResponse, error)

	// PostStoryElementsWithBodyWithResponse request with any body
	PostStoryElementsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error)

	PostStoryElementsWithResponse(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error)

	// DeleteStoryElementsNodeIdWithResponse request
	DeleteStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*DeleteStoryElementsNodeIdResponse, error)

	// GetStoryElementsNodeIdWithResponse request
	GetStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*GetStoryElementsNodeIdResponse, error)

	// PatchStoryElementsNodeIdWithBodyWithResponse request with any body
	PatchStoryElementsNodeIdWithBodyWithResponse(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStoryElementsNodeIdResponse, error)

	PatchStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, body models.PatchStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStoryElementsNodeIdResponse, error)
}

type PostPlayersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *models.Player
}

// Status returns HTTPResponse.Status
func (r PostPlayersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlayersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersPlayerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.Player
}

// Status returns HTTPResponse.Status
func (r GetPlayersPlayerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersPlayerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPlayersPlayerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.Player
}

// Status returns HTTPResponse.Status
func (r PatchPlayersPlayerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPlayersPlayerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStoryElementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *models.StoryElement
}

// Status returns HTTPResponse.Status
func (r PostStoryElementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStoryElementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStoryElementsNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStoryElementsNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStoryElementsNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoryElementsNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.StoryElement
}

// Status returns HTTPResponse.Status
func (r GetStoryElementsNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoryElementsNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchStoryElementsNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *models.StoryElement
}

// Status returns HTTPResponse.Status
func (r PatchStoryElementsNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchStoryElementsNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPlayersWithBodyWithResponse request with arbitrary body returning *PostPlayersResponse
func (c *ClientWithResponses) PostPlayersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlayersResponse, error) {
	rsp, err := c.PostPlayersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayersResponse(rsp)
}

func (c *ClientWithResponses) PostPlayersWithResponse(ctx context.Context, body models.PostPlayersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayersResponse, error) {
	rsp, err := c.PostPlayers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayersResponse(rsp)
}

// GetPlayersPlayerIdWithResponse request returning *GetPlayersPlayerIdResponse
func (c *ClientWithResponses) GetPlayersPlayerIdWithResponse(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*GetPlayersPlayerIdResponse, error) {
	rsp, err := c.GetPlayersPlayerId(ctx, playerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersPlayerIdResponse(rsp)
}

// PatchPlayersPlayerIdWithBodyWithResponse request with arbitrary body returning *PatchPlayersPlayerIdResponse
func (c *ClientWithResponses) PatchPlayersPlayerIdWithBodyWithResponse(ctx context.Context, playerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlayersPlayerIdResponse, error) {
	rsp, err := c.PatchPlayersPlayerIdWithBody(ctx, playerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlayersPlayerIdResponse(rsp)
}

func (c *ClientWithResponses) PatchPlayersPlayerIdWithResponse(ctx context.Context, playerId string, body models.PatchPlayersPlayerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlayersPlayerIdResponse, error) {
	rsp, err := c.PatchPlayersPlayerId(ctx, playerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlayersPlayerIdResponse(rsp)
}

// PostStoryElementsWithBodyWithResponse request with arbitrary body returning *PostStoryElementsResponse
func (c *ClientWithResponses) PostStoryElementsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error) {
	rsp, err := c.PostStoryElementsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoryElementsResponse(rsp)
}

func (c *ClientWithResponses) PostStoryElementsWithResponse(ctx context.Context, body models.PostStoryElementsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoryElementsResponse, error) {
	rsp, err := c.PostStoryElements(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoryElementsResponse(rsp)
}

// DeleteStoryElementsNodeIdWithResponse request returning *DeleteStoryElementsNodeIdResponse
func (c *ClientWithResponses) DeleteStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*DeleteStoryElementsNodeIdResponse, error) {
	rsp, err := c.DeleteStoryElementsNodeId(ctx, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStoryElementsNodeIdResponse(rsp)
}

// GetStoryElementsNodeIdWithResponse request returning *GetStoryElementsNodeIdResponse
func (c *ClientWithResponses) GetStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*GetStoryElementsNodeIdResponse, error) {
	rsp, err := c.GetStoryElementsNodeId(ctx, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoryElementsNodeIdResponse(rsp)
}

// PatchStoryElementsNodeIdWithBodyWithResponse request with arbitrary body returning *PatchStoryElementsNodeIdResponse
func (c *ClientWithResponses) PatchStoryElementsNodeIdWithBodyWithResponse(ctx context.Context, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStoryElementsNodeIdResponse, error) {
	rsp, err := c.PatchStoryElementsNodeIdWithBody(ctx, nodeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStoryElementsNodeIdResponse(rsp)
}

func (c *ClientWithResponses) PatchStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, body models.PatchStoryElementsNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStoryElementsNodeIdResponse, error) {
	rsp, err := c.PatchStoryElementsNodeId(ctx, nodeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStoryElementsNodeIdResponse(rsp)
}

// ParsePostPlayersResponse parses an HTTP response from a PostPlayersWithResponse call
func ParsePostPlayersResponse(rsp *http.Response) (*PostPlayersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlayersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest models.Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPlayersPlayerIdResponse parses an HTTP response from a GetPlayersPlayerIdWithResponse call
func ParseGetPlayersPlayerIdResponse(rsp *http.Response) (*GetPlayersPlayerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersPlayerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchPlayersPlayerIdResponse parses an HTTP response from a PatchPlayersPlayerIdWithResponse call
func ParsePatchPlayersPlayerIdResponse(rsp *http.Response) (*PatchPlayersPlayerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPlayersPlayerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStoryElementsResponse parses an HTTP response from a PostStoryElementsWithResponse call
func ParsePostStoryElementsResponse(rsp *http.Response) (*PostStoryElementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStoryElementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest models.StoryElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteStoryElementsNodeIdResponse parses an HTTP response from a DeleteStoryElementsNodeIdWithResponse call
func ParseDeleteStoryElementsNodeIdResponse(rsp *http.Response) (*DeleteStoryElementsNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStoryElementsNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStoryElementsNodeIdResponse parses an HTTP response from a GetStoryElementsNodeIdWithResponse call
func ParseGetStoryElementsNodeIdResponse(rsp *http.Response) (*GetStoryElementsNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoryElementsNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.StoryElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchStoryElementsNodeIdResponse parses an HTTP response from a PatchStoryElementsNodeIdWithResponse call
func ParsePatchStoryElementsNodeIdResponse(rsp *http.Response) (*PatchStoryElementsNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchStoryElementsNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest models.StoryElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
