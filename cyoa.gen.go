// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// PlayerState defines model for PlayerState.
type PlayerState struct {
	Artifacts      *[]string `json:"artifacts,omitempty"`
	CurrentChapter *string   `json:"currentChapter,omitempty"`
	CurrentPart    *string   `json:"currentPart,omitempty"`
	PlayerId       *string   `json:"playerId,omitempty"`
	Wisdoms        *[]string `json:"wisdoms,omitempty"`
}

// StoryElement defines model for StoryElement.
type StoryElement struct {
	Chapter *struct {
		ArtURL   *string `json:"artURL,omitempty"`
		Name     *string `json:"name,omitempty"`
		VideoURL *string `json:"videoURL,omitempty"`
	} `json:"chapter,omitempty"`
	Content *string                   `json:"content,omitempty"`
	NodeId  *string                   `json:"nodeId,omitempty"`
	Options *[]map[string]interface{} `json:"options,omitempty"`
	Part    *struct {
		ArtURL   *string `json:"artURL,omitempty"`
		Name     *string `json:"name,omitempty"`
		VideoURL *string `json:"videoURL,omitempty"`
	} `json:"part,omitempty"`
	Wisdoms *[]map[string]interface{} `json:"wisdoms,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPlayerPlayerId request
	GetPlayerPlayerId(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoryElementsNodeId request
	GetStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPlayerPlayerId(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayerPlayerIdRequest(c.Server, playerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoryElementsNodeId(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoryElementsNodeIdRequest(c.Server, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPlayerPlayerIdRequest generates requests for GetPlayerPlayerId
func NewGetPlayerPlayerIdRequest(server string, playerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerId", runtime.ParamLocationPath, playerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoryElementsNodeIdRequest generates requests for GetStoryElementsNodeId
func NewGetStoryElementsNodeIdRequest(server string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storyElements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPlayerPlayerIdWithResponse request
	GetPlayerPlayerIdWithResponse(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*GetPlayerPlayerIdResponse, error)

	// GetStoryElementsNodeIdWithResponse request
	GetStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*GetStoryElementsNodeIdResponse, error)
}

type GetPlayerPlayerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlayerState
}

// Status returns HTTPResponse.Status
func (r GetPlayerPlayerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayerPlayerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoryElementsNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoryElement
}

// Status returns HTTPResponse.Status
func (r GetStoryElementsNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoryElementsNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPlayerPlayerIdWithResponse request returning *GetPlayerPlayerIdResponse
func (c *ClientWithResponses) GetPlayerPlayerIdWithResponse(ctx context.Context, playerId string, reqEditors ...RequestEditorFn) (*GetPlayerPlayerIdResponse, error) {
	rsp, err := c.GetPlayerPlayerId(ctx, playerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayerPlayerIdResponse(rsp)
}

// GetStoryElementsNodeIdWithResponse request returning *GetStoryElementsNodeIdResponse
func (c *ClientWithResponses) GetStoryElementsNodeIdWithResponse(ctx context.Context, nodeId string, reqEditors ...RequestEditorFn) (*GetStoryElementsNodeIdResponse, error) {
	rsp, err := c.GetStoryElementsNodeId(ctx, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoryElementsNodeIdResponse(rsp)
}

// ParseGetPlayerPlayerIdResponse parses an HTTP response from a GetPlayerPlayerIdWithResponse call
func ParseGetPlayerPlayerIdResponse(rsp *http.Response) (*GetPlayerPlayerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayerPlayerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlayerState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStoryElementsNodeIdResponse parses an HTTP response from a GetStoryElementsNodeIdWithResponse call
func ParseGetStoryElementsNodeIdResponse(rsp *http.Response) (*GetStoryElementsNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoryElementsNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoryElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a player's state.
	// (GET /player/{playerId})
	GetPlayerPlayerId(ctx echo.Context, playerId string) error
	// Retrieve a story node by its ID.
	// (GET /storyElements/{nodeId})
	GetStoryElementsNodeId(ctx echo.Context, nodeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPlayerPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayerPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playerId", runtime.ParamLocationPath, ctx.Param("playerId"), &playerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayerPlayerId(ctx, playerId)
	return err
}

// GetStoryElementsNodeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStoryElementsNodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, ctx.Param("nodeId"), &nodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStoryElementsNodeId(ctx, nodeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/player/:playerId", wrapper.GetPlayerPlayerId)
	router.GET(baseURL+"/storyElements/:nodeId", wrapper.GetStoryElementsNodeId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUT2/TThD9Kqv5/SQukR3g5ltpEaqEIGrhgFAP2/Uk3mLvLjPjRFaU7452N5ZT4lbl",
	"grjZ82/fvDczezC+C96hE4ZqD2wa7HT6XLV6QLoVLRh/A/mAJBaTU5PYtTY5yQp26UOGgFABC1m3gcNi",
	"NGgiPcR/0xOhk8tGB0GaTTmGrDTJrD8kWNf1rHNnufbdH4GaDP7+AY3EiFvxNLxvsUMn572bCf0ZKV9v",
	"Ps6+6XSHs46trdHPZ80hM97JEdT5G77GJ3jxQax3s7xMtX8XKxwl+OtNPqPiU2jPy0STdWsfk2tkQzZx",
	"ABVcOHWxulZrT0qry8Z7RvXN96Q+75y6qLfopCdUG92hWnvTM9bKOyWoTWPdRl29+6L4h21bLmABYqWN",
	"7z5daGeliUmwgC0SZxCvi2WxzNKg08FCBW+TKfIuTeq5zLNe7seZP0TrBpMqURMdO4qSwweUvK+rcT2S",
	"frpDQWKovu/BxmdjbRiVmnZpAYQ/e0tYQyXU4+J4COYEu4vBHLzjPBBvlsu0FdNk6hBaaxK48oFju/uT",
	"ev8TrqGC/8rp8pTHs1Oe3pyk4GPlsltx9CtCIYtbrIskP/ddp2mACm6ODqVVbvAV55QcWPLJdnO5z2vz",
	"LLWn94A/5TV7Cb9uDP032H101mboTX4VQb+IXJ7C7wdlhdX1VZHrMtJ25KWnFipoRAJXZamDLQbf0w7v",
	"2QoWxndwuDv8CgAA//9lcWfiiAYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
